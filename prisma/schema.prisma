generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // schemas   = ["auth", "public"]
}

model Users {
  id        String      @id @unique @db.Uuid
  publicId  String      @unique @db.VarChar
  firstName String?     @db.VarChar
  lastName  String?     @db.VarChar
  type      UserType
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt DateTime    @default(now()) @db.Timestamptz(6)
  deletedAt DateTime?   @db.Timestamptz(6)
  changelog Changelog[]
  comments  Comments[]
  reports   Reports[]

  // @@schema("public")
}

model Changelog {
  id         Int                 @id @default(autoincrement())
  objectType ChangelogObjectType
  objectId   Int?
  creatorId  String              @db.Uuid
  createdAt  DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime            @default(now()) @db.Timestamptz(6)
  oldValue   Json
  newValue   Json
  objectAttr String              @db.VarChar
  users      Users               @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // @@schema("public")
}

model Comments {
  id         Int               @id @default(autoincrement())
  objectType CommentObjectType
  objectId   Int
  content    String
  replyTo    Int?
  creatorId  String            @db.Uuid
  createdAt  DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime          @default(now()) @db.Timestamptz(6)
  deletedAt  DateTime?         @db.Timestamptz(6)
  users      Users             @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // @@schema("public")
}

model ReportTypes {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar
  group       String    @db.VarChar
  markerColor String?   @db.VarChar
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime? @db.Timestamptz(6)
  reports     Reports[]

  // @@schema("public")
}

model Reports {
  id           Int         @id @default(autoincrement())
  email        String?     @db.VarChar
  streetNumber Int?
  streetName   String?     @db.VarChar
  postalCode   String?     @db.VarChar
  neighborhood String?     @db.VarChar
  lat          Float
  lng          Float
  z_images     Json?       @db.Json
  status       String      @db.VarChar
  details      String?
  reportTypeId Int
  creatorId    String?     @db.Uuid
  createdAt    DateTime?   @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime?   @default(now()) @db.Timestamptz(6)
  deletedAt    DateTime?   @db.Timestamptz(6)
  users        Users?      @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reportType   ReportTypes @relation(fields: [reportTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  images       Images[]    @relation("ReportImage")

  // @@schema("public")
}

model Images {
  id          Int             @id @default(autoincrement())
  objectType  ImageObjectType
  objectId    Int
  src         String          @db.VarChar
  blurDataUrl String?         @db.VarChar
  height      Int?
  width       Int?
  hexColor    String?
  createdAt   DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?       @default(now()) @db.Timestamptz(6)
  deletedAt   DateTime?       @db.Timestamptz(6)
  report      Reports?        @relation("ReportImage", fields: [objectId], references: [id], map: "report_image")
  // @@schema("public")
}

enum UserType {
  USER
  ADMIN

  // @@schema("public")
}

enum CommentObjectType {
  REPORT

  // @@schema("public")
}

enum ImageObjectType {
  REPORT

  // @@schema("public")
}

enum ChangelogObjectType {
  REPORT

  // @@schema("public")
}
